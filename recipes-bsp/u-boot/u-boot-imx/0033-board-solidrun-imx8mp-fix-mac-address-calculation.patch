From fbd713030c4f953e2a5c169a342d4edffd603d58 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Mon, 21 Aug 2023 13:11:55 +0200
Subject: [PATCH 33/34] board: solidrun: imx8mp: fix mac address calculation

1. mac_add_n function produced unexpected results, incrementing
66:55:44:33:22:11 to 67:55:44:33:22:11 instead of 66:55:44:33:22:12.
Replave the union and numeric increment with very simple increment-by-1
byte for byte loop.

2. board_get_mac used illegal offset into the MAC itself, likely because
hb_tlv_data.tlv_mac_base is a 2-dimensional array.
Only the first dimension is eeprom-specific though, drop the second
index.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 .../imx8mp_solidrun/imx8mp_solidrun.c         | 41 +++++++++++++------
 1 file changed, 28 insertions(+), 13 deletions(-)

diff --git a/board/solidrun/imx8mp_solidrun/imx8mp_solidrun.c b/board/solidrun/imx8mp_solidrun/imx8mp_solidrun.c
index 50909a2879..7dbd9d5509 100644
--- a/board/solidrun/imx8mp_solidrun/imx8mp_solidrun.c
+++ b/board/solidrun/imx8mp_solidrun/imx8mp_solidrun.c
@@ -654,14 +654,30 @@ int board_late_init(void)
 
 // calculate n-th mac from base
 static void mac_add_n(unsigned char *base, u16 n) {
-	union {
-		unsigned char byte[8];
-		u64 number;
-	} temp;
-
-	memcpy(temp.byte, base, 6);
-	temp.number += n;
-	memcpy(base, temp.byte, 6);
+	if (n == 0)
+		return;
+
+	/*
+	 * There is no 48 or 64-bit capable big-endian / host order
+	 * conversion function available, increment byte for byte ...
+	 */
+	base[5]++;
+	if (base[5] == 0) {
+		base[4]++;
+		if (base[4] == 0) {
+			base[3]++;
+			if (base[3] == 0) {
+				base[2]++;
+				if (base[2] == 0) {
+					base[1]++;
+					if (base[1] == 0)
+						base[0]++;
+				}
+			}
+		}
+	}
+
+	return mac_add_n(base, n-1);
 }
 
 /*
@@ -687,21 +703,20 @@ int board_get_mac(int dev_id, unsigned char *mac) {
 	// tlv eeproms
 	i = dev_id;
 	for(int j = 0; j < TLV_MAX_DEVICES; j++) {
-		if(!is_valid_ethaddr(&hb_tlv_data.tlv_mac_base[i][j]))
+		if(!is_valid_ethaddr(&hb_tlv_data.tlv_mac_base[j]))
 			continue;
 
 		// count if enough macs are provided
-		if(i >= hb_tlv_data.tlv_mac_count[j]) {
-			// maybe in next eeprom?
+		if (i >= hb_tlv_data.tlv_mac_count[j]) {
 			i -= hb_tlv_data.tlv_mac_count[j];
 			continue;
 		}
 
 		// compute i-th mac
-		memcpy(mac, &hb_tlv_data.tlv_mac_base[i][j], 6);
+		memcpy(mac, &hb_tlv_data.tlv_mac_base[j], 6);
 		mac_add_n(mac, i);
 
-		if(is_valid_ethaddr(mac)) {
+		if (is_valid_ethaddr(mac)) {
 			printf("%s: interface %i: using mac from tlv eeprom: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__, dev_id, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 			return 0;
 		} else {
-- 
2.35.3

