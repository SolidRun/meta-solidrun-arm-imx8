From 3edc77f478740faace8a841a919e887268ab8696 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Thu, 17 Aug 2023 12:30:28 +0200
Subject: [PATCH 30/30] board: solidrun: imx8mp: introduce ddr training patches
 to reduce spl size

Now that there are 5 different DDR training parameters supporting 7
variants of DDR modules, SPL has grown unreasonably due to
each training file contributing roughly 14kB of data.

Introduce a 'timing_patch_apply' function that can modify the values of an
existing 'struct dram_timing_info' in-memory based on a minimal patch
structure containing only differences to a known base.

Because we try ddr training multiple times using different parameters,
the patch function can undo its changes by executing a second time to
restore the original for later use.

Unfortunately some of the training files differ in which ddr registers
they touch. I.e. one training file might specify a value for a particular
ddr register, while another training file skips setting it completely.

In absence of known default values only two training files have been
converted to patches:
- 8GB Micron as a patch against 4GB Samsung / Micron
- 2GB Samsung as a patch against 1GB Samsung / Micron

Future patches can be created by comparing two full training files as
generated by NXP DDR Tool using 'diff'.
Each difference can be expressed by an array entry within a minimal
'struct dram_timing_info'.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 board/solidrun/imx8mp_solidrun/Makefile       |  5 +-
 .../solidrun/imx8mp_solidrun/lpddr4_timing.c  | 52 +++++++++++++++++++
 .../solidrun/imx8mp_solidrun/lpddr4_timing.h  | 43 +++++++++++++++
 .../lpddr4_timing_3gb_micron.c                |  4 +-
 .../lpddr4_timing_patch_2gb_samsung.c         | 51 ++++++++++++++++++
 .../lpddr4_timing_patch_8gb_micron.c          | 31 +++++++++++
 board/solidrun/imx8mp_solidrun/spl.c          | 42 ++++++++++-----
 7 files changed, 211 insertions(+), 17 deletions(-)
 create mode 100644 board/solidrun/imx8mp_solidrun/lpddr4_timing.c
 create mode 100644 board/solidrun/imx8mp_solidrun/lpddr4_timing.h
 create mode 100644 board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_2gb_samsung.c
 create mode 100644 board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_8gb_micron.c

diff --git a/board/solidrun/imx8mp_solidrun/Makefile b/board/solidrun/imx8mp_solidrun/Makefile
index ca86121cb5..a55643cf63 100644
--- a/board/solidrun/imx8mp_solidrun/Makefile
+++ b/board/solidrun/imx8mp_solidrun/Makefile
@@ -8,9 +8,10 @@ obj-y += imx8mp_solidrun.o mmc.o ../common/tlv_data.o
 
 ifdef CONFIG_SPL_BUILD
 obj-y += spl.o
+obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing.o
 obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing_1gb_samsung_micron.o
-obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing_2gb_samsung.o
+obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing_patch_2gb_samsung.o
 obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing_3gb_micron.o
 obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing_4gb_samsung_micron.o
-obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing_8gb_micron.o
+obj-$(CONFIG_IMX8M_LPDDR4) += lpddr4_timing_patch_8gb_micron.o
 endif
diff --git a/board/solidrun/imx8mp_solidrun/lpddr4_timing.c b/board/solidrun/imx8mp_solidrun/lpddr4_timing.c
new file mode 100644
index 0000000000..1447e60cbf
--- /dev/null
+++ b/board/solidrun/imx8mp_solidrun/lpddr4_timing.c
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2023 Josua Mayer <josua@solid-run.com>
+ */
+
+#include <asm/arch/ddr.h>
+
+#include "lpddr4_timing.h"
+
+static inline void swapu(unsigned int *a, unsigned int *b) {
+	unsigned int c;
+
+	c = *a;
+	*a = *b;
+	*b = c;
+}
+
+static void dram_cfg_param_patch_apply(struct dram_cfg_param *const config, size_t const size, struct dram_cfg_param *const patch, size_t const length)
+{
+	size_t i, j;
+
+	for (i = 0; i < size; i++)
+		for (j = 0; j < length; j++)
+			if (config[i].reg == patch[j].reg)
+				swapu(&config[i].val, &patch[j].val);
+}
+
+static void dram_fsp_msg_patch_apply(struct dram_fsp_msg *const msg, size_t const size, struct dram_fsp_msg *const patch, size_t const length)
+{
+	size_t i;
+
+	for (i = 0; i < size && i < length; i++) {
+		if (patch[i].drate)
+			swapu(&msg[i].drate, &patch[i].drate);
+		if (patch->fw_type != -1)
+			swapu(&msg[i].fw_type, &patch[i].fw_type);
+		dram_cfg_param_patch_apply(msg->fsp_cfg, msg->fsp_cfg_num, patch->fsp_cfg, patch->fsp_cfg_num);
+    }
+}
+
+void timing_patch_apply(struct dram_timing_info *const info, struct dram_timing_info *const patch)
+{
+	size_t i;
+	dram_cfg_param_patch_apply(info->ddrc_cfg, info->ddrc_cfg_num, patch->ddrc_cfg, patch->ddrc_cfg_num);
+	dram_cfg_param_patch_apply(info->ddrphy_cfg, info->ddrphy_cfg_num, patch->ddrphy_cfg, patch->ddrphy_cfg_num);
+	dram_fsp_msg_patch_apply(info->fsp_msg, info->fsp_msg_num, patch->fsp_msg, patch->fsp_msg_num);
+	dram_cfg_param_patch_apply(info->ddrphy_trained_csr, info->ddrphy_trained_csr_num, patch->ddrphy_trained_csr, patch->ddrphy_trained_csr_num);
+	dram_cfg_param_patch_apply(info->ddrphy_pie, info->ddrphy_pie_num, patch->ddrphy_pie, patch->ddrphy_pie_num);
+	for (i = 0; i < ARRAY_SIZE(info->fsp_table); i++)
+		if (patch->fsp_table[i])
+			swapu(&info->fsp_table[i], &patch->fsp_table[i]);
+}
diff --git a/board/solidrun/imx8mp_solidrun/lpddr4_timing.h b/board/solidrun/imx8mp_solidrun/lpddr4_timing.h
new file mode 100644
index 0000000000..56275d1f8c
--- /dev/null
+++ b/board/solidrun/imx8mp_solidrun/lpddr4_timing.h
@@ -0,0 +1,43 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2023 Josua Mayer <josua@solid-run.com>
+ */
+
+#ifndef __IMX8MPSR_LPDDR4_TIMING_H__
+#define __IMX8MPSR_LPDDR4_TIMING_H__
+
+/*
+ * timings for 1GB Samsung / Micron
+ */
+extern struct dram_timing_info dram_timing_1gb_samsung_micron;
+
+/*
+ * timings for additional variants, as patch against 1GB Samsung
+ * - 2GB Samsung
+ */
+extern struct dram_timing_info dram_timing_patch_2gb_samsung;
+
+/*
+ * timings for 3GB Micron
+ */
+extern struct dram_timing_info dram_timing_3gb_micron;
+
+/*
+ * timings for 4GB Samsung / Micron
+ */
+extern struct dram_timing_info dram_timing_4gb_samsung_micron;
+
+/*
+ * timings for additional variants, as patch against 4GB Samsung / Micron
+ * - 8GB Micron
+ */
+extern struct dram_timing_info dram_timing_patch_8gb_micron;
+
+/*
+ * patch function to apply timing differences in-place
+ *
+ * Note: uses patch to store original values, execute again to revert!
+ */
+void timing_patch_apply(struct dram_timing_info *const info, struct dram_timing_info *const patch);
+
+#endif /* __IMX8MPSR_LPDDR4_TIMING_H__ */
diff --git a/board/solidrun/imx8mp_solidrun/lpddr4_timing_3gb_micron.c b/board/solidrun/imx8mp_solidrun/lpddr4_timing_3gb_micron.c
index 2dc6efc01c..284ff54ec5 100644
--- a/board/solidrun/imx8mp_solidrun/lpddr4_timing_3gb_micron.c
+++ b/board/solidrun/imx8mp_solidrun/lpddr4_timing_3gb_micron.c
@@ -1092,7 +1092,7 @@ static struct dram_cfg_param ddr_fsp0_cfg[] = {
 
 
 /* P1 message block paremeter for training firmware */
-struct dram_cfg_param ddr_fsp1_cfg[] = {
+static struct dram_cfg_param ddr_fsp1_cfg[] = {
 	{ 0xd0000, 0x0 },
 	{ 0x54002, 0x101 },
 	{ 0x54003, 0x190 },
@@ -1215,7 +1215,7 @@ static struct dram_cfg_param ddr_fsp0_2d_cfg[] = {
 };
 
 /* DRAM PHY init engine image */
-struct dram_cfg_param ddr_phy_pie[] = {
+static struct dram_cfg_param ddr_phy_pie[] = {
 	{ 0xd0000, 0x0 },
 	{ 0x90000, 0x10 },
 	{ 0x90001, 0x400 },
diff --git a/board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_2gb_samsung.c b/board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_2gb_samsung.c
new file mode 100644
index 0000000000..e978701e2a
--- /dev/null
+++ b/board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_2gb_samsung.c
@@ -0,0 +1,51 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2023 Josua Mayer <josua@solid-run.com>
+ */
+
+#include <asm/arch/ddr.h>
+
+static struct dram_cfg_param ddr_ddrc_cfg[] = {
+	{ 0x3d400064, 0xf008c },
+	{ 0x3d400070, 0x7027f90 },
+	{ 0x3d400074, 0x790 },
+	{ 0x3d400100, 0x2028042a },
+	{ 0x3d40011c, 0x502 },
+	{ 0x3d400138, 0x94 },
+	{ 0x3d400180, 0x3e8001e },
+	{ 0x3d4000f4, 0x799 },
+	{ 0x3d400108, 0x9121b1c },
+	{ 0x3d400208, 0x0 },
+	{ 0x3d400218, 0x7070707 },
+	{ 0x3d402064, 0x3000e },
+	{ 0x3d402100, 0xa040105 },
+	{ 0x3d40211c, 0x302 },
+	{ 0x3d402138, 0xf },
+	{ 0x3d402180, 0x640004 },
+	{ 0x3d4020f4, 0x599 },
+	{ 0x3d403064, 0x30004 },
+	{ 0x3d40311c, 0x302 },
+	{ 0x3d403138, 0x4 },
+	{ 0x3d403180, 0x190004 },
+	{ 0x3d4030f4, 0x599 },
+};
+
+static struct dram_cfg_param ddr_phy_pie[] = {
+	{ 0x2000b, 0x465 },
+	{ 0x12000b, 0x70 },
+	{ 0x22000b, 0x1c },
+};
+
+struct dram_timing_info dram_timing_patch_2gb_samsung = {
+	.ddrc_cfg = ddr_ddrc_cfg,
+	.ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
+	.ddrphy_cfg = NULL,
+	.ddrphy_cfg_num = 0,
+	.fsp_msg = NULL,
+	.fsp_msg_num = 0,
+	.ddrphy_trained_csr = NULL,
+	.ddrphy_trained_csr_num = 0,
+	.ddrphy_pie = ddr_phy_pie,
+	.ddrphy_pie_num = ARRAY_SIZE(ddr_phy_pie),
+	.fsp_table = {},
+};
diff --git a/board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_8gb_micron.c b/board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_8gb_micron.c
new file mode 100644
index 0000000000..fcc9e8f1b5
--- /dev/null
+++ b/board/solidrun/imx8mp_solidrun/lpddr4_timing_patch_8gb_micron.c
@@ -0,0 +1,31 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2023 Josua Mayer <josua@solid-run.com>
+ */
+
+#include <asm/arch/ddr.h>
+
+static struct dram_cfg_param ddr_ddrc_cfg[] = {
+	{ 0x3d400064, 0x7a017c },
+	{ 0x3d400138, 0x184 },
+	{ 0x3d400200, 0x18 },
+	{ 0x3d40021c, 0xf07 },
+	{ 0x3d402064, 0xc0026 },
+	{ 0x3d402138, 0x27 },
+	{ 0x3d403064, 0x3000a },
+	{ 0x3d403138, 0xa },
+};
+
+struct dram_timing_info dram_timing_patch_8gb_micron = {
+	.ddrc_cfg = ddr_ddrc_cfg,
+	.ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
+	.ddrphy_cfg = NULL,
+	.ddrphy_cfg_num = 0,
+	.fsp_msg = NULL,
+	.fsp_msg_num = 0,
+	.ddrphy_trained_csr = NULL,
+	.ddrphy_trained_csr_num = 0,
+	.ddrphy_pie = NULL,
+	.ddrphy_pie_num = 0,
+	.fsp_table = {},
+};
diff --git a/board/solidrun/imx8mp_solidrun/spl.c b/board/solidrun/imx8mp_solidrun/spl.c
index 8a3e562c07..3f76caad17 100644
--- a/board/solidrun/imx8mp_solidrun/spl.c
+++ b/board/solidrun/imx8mp_solidrun/spl.c
@@ -31,15 +31,11 @@
 #include <mmc.h>
 #include <asm/arch/ddr.h>
 
+#include "lpddr4_timing.h"
+
 #define ONE_GB 0x40000000ULL
 DECLARE_GLOBAL_DATA_PTR;
 
-extern struct dram_timing_info dram_timing_8gb_micron;
-extern struct dram_timing_info dram_timing_4gb_samsung_micron;
-extern struct dram_timing_info dram_timing_3gb_micron;
-extern struct dram_timing_info dram_timing_2gb_samsung;
-extern struct dram_timing_info dram_timing_1gb_samsung_micron;
-
 int spl_board_boot_device(enum boot_device boot_dev_spl)
 {
 #ifdef CONFIG_SPL_BOOTROM_SUPPORT
@@ -67,16 +63,29 @@ int spl_board_boot_device(enum boot_device boot_dev_spl)
 }
 
 #ifdef PRINT_DDR_TABLES
+static struct dram_timing_info *const dram_timing_patch(struct dram_timing_info *const timings)
+{
+	if (timings == &dram_timing_patch_2gb_samsung) {
+		timing_patch_apply(&dram_timing_1gb_samsung_micron, timings);
+		return &dram_timing_1gb_samsung_micron;
+	}
+	if (timings == &dram_timing_patch_8gb_micron) {
+		timing_patch_apply(&dram_timing_4gb_samsung_micron, timings);
+		return &dram_timing_4gb_samsung_micron;
+	}
+	return timings;
+}
+
 static struct dram_configs {
 	const char *const label;
 	struct dram_timing_info *const timings;
 	unsigned int mr5, mr6, mr7, mr8;
 	bool is_valid;
 } confs[] = {
-	{ .label = "Samsung 8G       ", .timings = &dram_timing_8gb_micron },
+	{ .label = "Samsung 8G       ", .timings = &dram_timing_patch_8gb_micron },
 	{ .label = "Samsung/Micron 4G", .timings = &dram_timing_4gb_samsung_micron },
 	{ .label = "Micron 3G        ", .timings = &dram_timing_3gb_micron },
-	{ .label = "Samsung 2G       ", .timings = &dram_timing_2gb_samsung },
+	{ .label = "Samsung 2G       ", .timings = &dram_timing_patch_2gb_samsung },
 	{ .label = "Samsung/Micron 1G", .timings = &dram_timing_1gb_samsung_micron },
 };
 
@@ -86,7 +95,8 @@ static void spl_print_ddr_tables(void)
 
 	/* Collect data */
 	for (i = 0; i < ARRAY_SIZE(confs); i++) {
-		ret = ddr_init(confs[i].timings);
+		ret = ddr_init(dram_timing_patch(confs[i].timings));
+		dram_timing_patch(confs[i].timings);
 		if (ret) {
 			confs[i].is_valid = false;
 		} else {
@@ -184,7 +194,9 @@ static bool spl_generic_ddr_init(void)
 	bool output = true;
 
 	/* Try 8GB Micron. */
-	ret = ddr_init(&dram_timing_8gb_micron);
+	timing_patch_apply(&dram_timing_4gb_samsung_micron, &dram_timing_patch_8gb_micron);
+	ret = ddr_init(&dram_timing_4gb_samsung_micron);
+	timing_patch_apply(&dram_timing_4gb_samsung_micron, &dram_timing_patch_8gb_micron);
 	if (!ret) {
 		printf("DDR 8G Micron identified!\n");
 		goto exit;
@@ -214,7 +226,9 @@ static bool spl_generic_ddr_init(void)
 	/* Try 2G Samsung.
 	 * Will work with: 1G Samsung as well.
 	 */
-	ret = ddr_init(&dram_timing_2gb_samsung);
+	timing_patch_apply(&dram_timing_1gb_samsung_micron, &dram_timing_patch_2gb_samsung);
+	ret = ddr_init(&dram_timing_1gb_samsung_micron);
+	timing_patch_apply(&dram_timing_1gb_samsung_micron, &dram_timing_patch_2gb_samsung);
 	if (!ret) {
 		if (!spl_dram_is_1G()) {
 			printf("DDR 2G Samsung identified!\n");
@@ -315,7 +329,8 @@ static struct dram_timing_info *spl_identify_ddr(bool *needs_training)
 			return &dram_timing_4gb_samsung_micron;
 		} else if (mr5 == 0xFF && mr6 == 0x7 && mr7 == 0x0 && mr8 == 0x18) {
 			printf("DDR 8G Micron identified!\n");
-			return &dram_timing_8gb_micron;
+			timing_patch_apply(&dram_timing_4gb_samsung_micron, &dram_timing_patch_8gb_micron);
+			return &dram_timing_4gb_samsung_micron;
 		} else {
 			goto err;
 		}
@@ -344,7 +359,8 @@ static struct dram_timing_info *spl_identify_ddr(bool *needs_training)
 			return &dram_timing_1gb_samsung_micron;
 		} else if (mr5 == 0x1 && mr6 == 0x6 && mr7 == 0x10 && mr8 == 0x10) {
 			printf("DDR 2G Samsung identified!\n");
-			return &dram_timing_2gb_samsung;
+			timing_patch_apply(&dram_timing_1gb_samsung_micron, &dram_timing_patch_2gb_samsung);
+			return &dram_timing_1gb_samsung_micron;
 		} else {
 			goto err;
 		}
-- 
2.35.3

