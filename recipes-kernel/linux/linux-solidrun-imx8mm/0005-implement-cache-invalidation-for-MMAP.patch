From 0422686e12957d45ee01d3595009e618f7244f16 Mon Sep 17 00:00:00 2001
From: Michael Singer <michael.singer@baslerweb.com>
Date: Fri, 16 Aug 2019 15:22:10 +0200
Subject: [PATCH] implement cache invalidation for MMAP

When the property "bsl,dma-invalidate;" is added to the device tree, the data cache area of frame buffers
will get invalidated after each DMA transfer. The property takes an optional 64 bit integer parameter.
If this parameter is given, then the invalidation is only done for buffers that are smaller than this value.

Example with parameter:
  bsl,dma-invalidate = <0 2097152>; // invalidate buffers smaller than 2MB
---
 .../media/v4l2-core/videobuf2-dma-contig.c    | 22 +++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/drivers/media/v4l2-core/videobuf2-dma-contig.c b/drivers/media/v4l2-core/videobuf2-dma-contig.c
index 9f389f36566d..a24fa7ccdf2e 100644
--- a/drivers/media/v4l2-core/videobuf2-dma-contig.c
+++ b/drivers/media/v4l2-core/videobuf2-dma-contig.c
@@ -17,6 +17,9 @@
 #include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/dma-mapping.h>
+#include <linux/of.h>
+
+#include <asm/cacheflush.h>
 
 #include <media/videobuf2-v4l2.h>
 #include <media/videobuf2-dma-contig.h>
@@ -37,6 +40,7 @@ struct vb2_dc_buf {
 	struct vb2_vmarea_handler	handler;
 	refcount_t			refcount;
 	struct sg_table			*sgt_base;
+	bool				inval_cache;
 
 	/* DMABUF related */
 	struct dma_buf_attachment	*db_attach;
@@ -109,10 +113,14 @@ static void vb2_dc_finish(void *buf_priv)
 	struct sg_table *sgt = buf->dma_sgt;
 
 	/* DMABUF exporter will flush the cache for us */
-	if (!sgt || buf->db_attach)
+	if (buf->db_attach)
 		return;
 
-	dma_sync_sg_for_cpu(buf->dev, sgt->sgl, sgt->orig_nents, buf->dma_dir);
+	if (sgt)
+		dma_sync_sg_for_cpu(buf->dev, sgt->sgl, sgt->orig_nents,
+				    buf->dma_dir);
+	else if (buf->inval_cache)
+		__inval_dcache_area(buf->vaddr, buf->size);
 }
 
 /*********************************************/
@@ -141,6 +149,8 @@ static void *vb2_dc_alloc(struct device *dev, unsigned long attrs,
 			  gfp_t gfp_flags)
 {
 	struct vb2_dc_buf *buf;
+	u64 prop_value;
+	int err;
 
 	if (WARN_ON(!dev))
 		return ERR_PTR(-EINVAL);
@@ -167,6 +177,14 @@ static void *vb2_dc_alloc(struct device *dev, unsigned long attrs,
 	buf->size = size;
 	buf->dma_dir = dma_dir;
 
+	err = of_property_read_u64(buf->dev->of_node, "bsl,dma-invalidate",
+				   &prop_value);
+	/* invalidate cache if buffer is too small */
+	buf->inval_cache = !err && (size < prop_value);
+	/* always invalidate cache if property doesn't provide a size limit */
+	buf->inval_cache |= err && err != -EINVAL;
+	dev_printk(KERN_DEBUG, dev, "Post DMA cache invalidation %s\n", buf->inval_cache ? "enabled" : "disabled");
+
 	buf->handler.refcount = &buf->refcount;
 	buf->handler.put = vb2_dc_put;
 	buf->handler.arg = buf;
-- 
2.21.0

