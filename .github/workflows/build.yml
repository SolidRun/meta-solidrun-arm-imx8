name: build

on:
  push:
    branches: ["scarthgap-imx8m"]
  pull_request:
    branches: ["scarthgap-imx8m"]
  schedule:
    - cron: "0 0 * * 5"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare_container:
    runs-on: self-hosted
    outputs:
      uid: ${{ steps.uid_step.outputs.userid }}
      gid: ${{ steps.uid_step.outputs.groupid }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Get user id/group
        id: uid_step
        run: |
          echo "userid=$(id -u)" >> "$GITHUB_OUTPUT"
          echo "groupid=$(id -g)" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: /etc/docker/cibuilder.toml

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ciserver.ci:5000
          username: ${{ secrets.CI_CACHE_REGISTRY_LOGIN }}
          password: ${{ secrets.CI_CACHE_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ciserver.ci:5000/${{ github.repository_id }}:latest
          cache-from: type=registry,ref=ciserver.ci:5000/${{ github.repository_id }}:cache-lf-6.6.52-2.2.0
          cache-to: type=registry,ref=ciserver.ci:5000/${{ github.repository_id }}:cache-lf-6.6.52-2.2.0,mode=max
          file: conf/docker/Dockerfile
          build-args: |
            USER_ID=${{ steps.uid_step.outputs.userid }}
            GROUP_ID=${{ steps.uid_step.outputs.groupid }}

  build_images:
    needs: prepare_container
    runs-on: self-hosted
    timeout-minutes: 1080
    container:
        image: ciserver.ci:5000/${{ github.repository_id }}:latest
        credentials:
            username: ${{ secrets.CI_CACHE_REGISTRY_LOGIN }}
            password: ${{ secrets.CI_CACHE_REGISTRY_PASSWORD }}
        options: --user developer
    outputs:
      build_tag: ${{ steps.tag_step.outputs.build_tag }}
    steps:
      - name: Checkout dependency layers
        shell: bash {0}
        run: |
          repo init -u https://github.com/nxp-imx/imx-manifest -b imx-linux-scarthgap -m imx-6.6.52-2.2.0.xml
          repo sync

      - name: Checkout pull-request version of meta-solidrun-arm-imx8
        uses: actions/checkout@v4
        with:
          path: sources/meta-solidrun-arm-imx8

      - name: Get build tag
        shell: bash {0}
        id: tag_step
        run: |
          build_tag=$(date +%Y-%m-%d)_$(cd sources/meta-solidrun-arm-imx8; git rev-parse --short HEAD)
          echo "build_tag=$build_tag" >> "$GITHUB_OUTPUT"

      - name: Create cache dir
        run: mkdir -p buildcache

      - name: Fetch cache from server
        uses: tespkg/actions-cache/restore@v1
        with:
          endpoint: ciserver.ci
          port: 9000
          insecure: true
          accessKey: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secretKey: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cicache
          use-fallback: false
          key: ${{ github.repository }}-lf-6.6.52-2.2.0
          path: |
            buildcache

      - name: Configure
        shell: bash {0}
        run: |
            EULA=1
            MACHINE=solidsense-n8 DISTRO=fsl-imx-xwayland source ./imx-setup-release.sh -b build
            printf 'BBLAYERS += "%s"\n' '${BSPDIR}/sources/meta-solidrun-arm-imx8' >> conf/bblayers.conf
            echo "require conf/includes/ci.conf" >> conf/local.conf

      - name: Download Sources (ignore errors)
        shell: bash {0}
        run: |
            . ./setup-environment build
            export CACHE_DIR="$GITHUB_WORKSPACE/buildcache"
            export BB_ENV_PASSTHROUGH_ADDITIONS="$BB_ENV_PASSTHROUGH_ADDITIONS CACHE_DIR"
            bitbake -k imx-image-core --runall=fetch
        continue-on-error: true

      - name: Build (ignore errors)
        id: build_step
        shell: bash {0}
        run: |
            . ./setup-environment build
            export CACHE_DIR="$GITHUB_WORKSPACE/buildcache"
            export BB_ENV_PASSTHROUGH_ADDITIONS="$BB_ENV_PASSTHROUGH_ADDITIONS CACHE_DIR"
            bitbake -k imx-image-core
        continue-on-error: true

      - name: Update cache on the server (build may have failed)
#        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: tespkg/actions-cache/save@v1
        with:
          endpoint: ciserver.ci
          port: 9000
          insecure: true
          accessKey: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secretKey: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cicache
          use-fallback: false
          key: ${{ github.repository }}-lf-6.6.52-2.2.0
          path: |
            buildcache

      - name: Fail Late
        if: failure() && steps.build_step.outcome == 'failure'
        shell: bash {0}
        run: |
            false

      - name: Select artifacts for publishing
        shell: bash -e {0}
        run: |
            ls -lh build/tmp/deploy/images/solidsense-n8
            mkdir deploy
            DEPLOY_PATH=build/tmp/deploy/images/solidsense-n8
            cp -L $DEPLOY_PATH/imx-image-core-solidsense-n8.rootfs.wic.bmap deploy/
            cp -L $DEPLOY_PATH/imx-image-core-solidsense-n8.rootfs.wic.zst deploy/
            cp -L $DEPLOY_PATH/imx-image-core-solidsense-n8.rootfs.manifest deploy/
            cp -L $DEPLOY_PATH/imx8mn-solidsense-n8-compact.dtb deploy/
            cp -L $DEPLOY_PATH/Image deploy/
            cp -L $DEPLOY_PATH/modules-solidsense-n8.tgz deploy/
            cp -L $DEPLOY_PATH/imx-boot-solidsense-n8-sd.bin-flash_ddr4_evk_no_hdmi deploy/u-boot-solidsense-n8-sd.bin
            ls -lh deploy/

      - name: Deploy to the local minio storage
        uses: yakubique/minio-upload@v1.1.3
        with:
          endpoint: http://ciserver.ci:9000
          insecure: true
          access_key: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secret_key: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cipublish
          source: ./deploy
          target: "/${{ github.repository_id }}/${{ steps.tag_step.outputs.build_tag }}"
          recursive: true

  publish_images:
    needs: build_images
    runs-on: self-hosted
    if: github.event_name == 'push'
    steps:
      - name: Download an artifacts from MinIO
        uses: yakubique/minio-download@v1.1.1
        with:
          endpoint: http://ciserver.ci:9000
          insecure: true
          access_key: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secret_key: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cipublish
          source: "/${{ github.repository_id }}/${{ needs.build_images.outputs.build_tag }}/"
          target: "."
          recursive: true

      - name: Upload to S3
        uses: shallwefootball/upload-s3-action@v1.3.3
        with:
          aws_key_id: ${{ secrets.IMAGES_S3_ACCESS }}
          aws_secret_access_key: ${{ secrets.IMAGES_S3_SECRET }}
          aws_bucket: ${{ secrets.IMAGES_S3_BUCKET }}
          endpoint: ${{ secrets.IMAGES_S3_HOST }}
          source_dir: deploy
          destination_dir: IMX8/meta-solidrun-arm-imx8/scarthgap-lf-6.6.52-2.2.0/${{ needs.build_images.outputs.build_tag }}
